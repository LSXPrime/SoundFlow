name: Build Native Library

on:
  push:
    paths:
      - 'Native/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            rid: win-x64
            platform: Windows
            arch: x64
            cmake_target_arch: x64
            lib_extension: ".dll"
            toolchain: "Visual Studio 17 2022"

          - os: windows-latest
            rid: win-x86
            platform: Windows
            arch: x86
            cmake_target_arch: Win32
            lib_extension: ".dll"
            toolchain: "Visual Studio 17 2022"

          - os: windows-latest
            rid: win-arm64
            platform: Windows
            arch: ARM64
            cmake_target_arch: ARM64
            lib_extension: ".dll"
            toolchain: "Visual Studio 17 2022"

          # Linux builds
          - os: ubuntu-22.04
            rid: linux-x64
            platform: Linux
            arch: x86_64
            cmake_target_arch: x64
            lib_extension: ".so"

          - os: ubuntu-22.04
            rid: linux-arm
            platform: Linux
            arch: armv7l
            cmake_target_arch: arm
            lib_extension: ".so"

          - os: ubuntu-22.04
            rid: linux-arm64
            platform: Linux
            arch: aarch64
            cmake_target_arch: aarch64
            lib_extension: ".so"

          # macOS builds
          - os: macos-latest
            rid: osx-arm64
            platform: macOS
            arch: arm64
            cmake_target_arch: arm64
            lib_extension: ".dylib"

          - os: macos-latest
            rid: osx-x64
            platform: macOS
            arch: x86_64
            cmake_target_arch: x86_64
            lib_extension: ".dylib"

          # iOS builds
          - os: macos-latest
            rid: ios-arm64
            platform: iOS
            arch: arm64
            cmake_target_arch: arm64
            lib_extension: ".framework"

          # Android builds
          - os: ubuntu-22.04
            rid: android-arm
            platform: Android
            arch: armeabi-v7a
            cmake_target_arch: armeabi-v7a
            lib_extension: ".so"

          - os: ubuntu-22.04
            rid: android-arm64
            platform: Android
            arch: arm64-v8a
            cmake_target_arch: arm64-v8a
            lib_extension: ".so"

          - os: ubuntu-22.04
            rid: android-x64
            platform: Android
            arch: x86_64
            cmake_target_arch: x86_64
            lib_extension: ".so"

    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create Build Directories
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/Native/build
          mkdir -p ${{ github.workspace }}/Native/cmake

      # Windows-specific setup
      - name: Setup Visual Studio (Windows)
        if: matrix.platform == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Install Windows SDK (Windows)
        if: matrix.platform == 'Windows'
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4

      - name: Install VS Build Tools
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Install Visual Studio Build Tools
          choco install visualstudio2019buildtools --package-parameters "--includeRecommended --includeOptional --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64" --no-progress
          
          # Find and set dumpbin path
          $vsPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC"
          $latestVersion = (Get-ChildItem -Path $vsPath | Sort-Object Name -Descending | Select-Object -First 1).Name
          $dumpbinPath = "$vsPath\$latestVersion\bin\Hostx64\x64"
          
          # Add to PATH
          "DUMPBIN_PATH=$dumpbinPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PATH=$dumpbinPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Linux/Android dependencies
      - name: Install Dependencies (Linux)
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc g++

      - name: Install Dependencies (Android)
        if: matrix.platform == 'Android'
        uses: android-actions/setup-android@v2

      - name: Configure CMake (Windows)
        if: matrix.platform == 'Windows'
        shell: cmd
        working-directory: ${{ github.workspace }}/Native
        run: |
          cmake -B build -G "%TOOLCHAIN%" -A %CMAKE_TARGET_ARCH% -DCMAKE_BUILD_TYPE=Release
        env:
          TOOLCHAIN: ${{ matrix.toolchain }}
          CMAKE_TARGET_ARCH: ${{ matrix.cmake_target_arch }}

      # Configure CMake for all platforms
      - name: Configure CMake (Unix)
        shell: bash
        working-directory: ${{ github.workspace }}/Native
        run: |
          CMAKE_FLAGS=""
          if [ "${{ matrix.platform }}" == "Android" ]; then
            CMAKE_FLAGS="-DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.arch }} -DANDROID_PLATFORM=android-21"
          elif [ "${{ matrix.platform }}" == "iOS" ]; then
            CMAKE_FLAGS="-G Xcode \
              -DCMAKE_SYSTEM_NAME=iOS \
              -DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake_target_arch }} \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
              -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY="" \
              -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED=NO \
              -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO"
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            CMAKE_FLAGS="-DCMAKE_OSX_ARCHITECTURES=${{ matrix.cmake_target_arch }}"
          elif [ "${{ matrix.platform }}" == "Linux" ]; then
            CMAKE_FLAGS="-DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cmake_target_arch }}"
          fi
          cmake -B build -DCMAKE_BUILD_TYPE=Release $CMAKE_FLAGS

      # Build steps
      - name: Build (Windows)
        if: matrix.platform == 'Windows'
        shell: cmd
        working-directory: ${{ github.workspace }}/Native/build
        run: |
          cmake --build . --config Release

      - name: Build (iOS)
        if: matrix.platform == 'iOS'
        shell: bash
        working-directory: ${{ github.workspace }}/Native/build
        run: |
          xcodebuild \
            -project *.xcodeproj \
            -configuration Release \
            -sdk iphoneos \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Build (Unix)
        if: matrix.platform != 'Windows' && matrix.platform != 'iOS'
        shell: bash
        working-directory: ${{ github.workspace }}/Native/build
        run: |
          cmake --build . --config Release

      # Artifact collection
      - name: Create Output Directory
        shell: bash
        run: |
          mkdir -p runtimes/${{ matrix.rid }}/native

      - name: Copy Library
        shell: bash
        run: |
          mkdir -p runtimes/${{ matrix.rid }}/native
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            cp "${{ github.workspace }}/Native/build/Release/miniaudio.dll" "runtimes/${{ matrix.rid }}/native/"
          elif [ "${{ matrix.platform }}" == "iOS" ]; then
            cp -r "${{ github.workspace }}/Native/build/Release-iphoneos/miniaudio.framework" "runtimes/${{ matrix.rid }}/native/"
          else
            cp "${{ github.workspace }}/Native/build/libminiaudio${{ matrix.lib_extension }}" "runtimes/${{ matrix.rid }}/native/"
          fi

      # Dependency analysis
      - name: Analyze Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Dependencies for Windows:"
          & "$env:DUMPBIN_PATH\dumpbin.exe" /DEPENDENTS "runtimes/${{ matrix.rid }}/native/miniaudio.dll"

      - name: Analyze Dependencies (iOS)
        if: matrix.platform == 'iOS'
        shell: bash
        run: |
          FRAMEWORK_BINARY="runtimes/${{ matrix.rid }}/native/miniaudio.framework/miniaudio"
          echo "Dependencies for iOS:"
          otool -L "$FRAMEWORK_BINARY"

      - name: Analyze Dependencies (Android)
        if: matrix.platform == 'Android'
        shell: bash
        run: |
          LIB_PATH="runtimes/${{ matrix.rid }}/native/libminiaudio.so"
          echo "Dependencies for Android:"
          readelf -d "$LIB_PATH"

      - name: Analyze Dependencies (Linux)
        if: matrix.platform == 'Linux'
        shell: bash
        run: |
          LIB_PATH="runtimes/${{ matrix.rid }}/native/libminiaudio.so"
          echo "Dependencies for Linux:"
          ldd "$LIB_PATH"

      - name: Analyze Dependencies (macOS)
        if: matrix.platform == 'macOS'
        shell: bash
        run: |
          LIB_PATH="runtimes/${{ matrix.rid }}/native/libminiaudio.dylib"
          echo "Dependencies for macOS:"
          otool -L "$LIB_PATH"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}

  package:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create final package
        run: |
          mkdir -p runtimes
          cp -r artifacts/* runtimes/
          zip -r native-libraries.zip runtimes

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: native-libraries
          path: native-libraries.zip